name: Deploy to Vultr

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  push:
    branches:
      - run  # Change this to your default branch if different

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Create Vultr Server
      id: create_server
      run: |
        # Create a new Vultr instance using the Vultr API
        response=$(curl -s -X POST https://api.vultr.com/v2/instances \
          -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"region": "sea","plan": "vhp-1c-1gb-amd","os_id": 2284,"sshkey_id": ["${{ secrets.VULTR_SSH_ID }}"],"label": "flask-app-server"}')
        echo "Response: $response"
        instance_id=$(echo $response | jq -r '.instance.id')
        echo "Instance ID: $instance_id"

        # Wait for the server to be ready
        while true; do
          status=$(curl -s -X GET https://api.vultr.com/v2/instances/$instance_id \
            -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" | jq -r '.instance.status')
          echo "Current status: $status"
          if [[ "$status" == "active" ]]; then
            break
          fi
          sleep 10
        done

        # Additional wait to ensure SSH readiness
        sleep 60  # Wait 1 minute to ensure SSH service is up

        # Get the server's IP address
        ip_address=$(curl -s -X GET https://api.vultr.com/v2/instances/$instance_id \
          -H "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}" | jq -r '.instance.main_ip')
        echo "Server IP: $ip_address"
        echo "ip_address=$ip_address" >> $GITHUB_ENV

    - name: Install SSH client
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client
  
    - name: Set up and run Flask app on Vultr
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.ip_address }}
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          tmux new -s llm-proxy

          # Update and install dependencies
          apt-get update
          apt-get install -y python3-pip python3-venv
  
          # Install Docker
          apt-get install -y apt-transport-https ca-certificates curl   software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/  ubuntu $(lsb_release -cs) stable"
          apt-get update
          apt-get install -y docker-ce
          
          # Start Docker service
          systemctl start docker
  
          # Clone the repository
          git clone https://github.com/${{ github.repository }} app
          cd app
  
          # Set up virtual environment and install dependencies
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
  
          # Set environment variables
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          export GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          export OPENAI_API_URL=${{ secrets.GEMINI_API_URL }}
          export GEMINI_API_URL=${{ secrets.GEMINI_API_URL }}
          export API_ACCESS_KEY=${{ secrets.API_ACCESS_KEY }}
          export DEFAULT_OPENAI_MODEL=${{ secrets.DEFAULT_OPENAI_MODEL }}
          export DEFAULT_GEMINI_MODEL=${{ secrets.DEFAULT_GEMINI_MODEL }}
          
          # Run the Docker command with cloudflared
          docker run -d -p ${{ secrets.PORT }}:${{ secrets.PORT }} cloudflare/  cloudflared:latest tunnel --no-autoupdate run --token ${{ secrets.  CLOUDFLARE_TUNNEL_TOKEN }}
  
          # Run the Flask application with Gunicorn
          gunicorn -w 4 -b localhost:${{ secrets.PORT }} proxy:app

    - name: Output Server IP
      run: echo "Your Flask app is running at http://${{ env.ip_address }}:${{ secrets.PORT }}"